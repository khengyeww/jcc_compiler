/* Generated By:JavaCC: Do not edit this line. Quartz.java */
import java.io.*;
import java.util.*;
public class Quartz implements QuartzConstants {
        private Env env = new Env();

        public static void main(String args [])
    {
        try {
            if (args.length == 0)
                new Quartz(System.in).interactive();    // 対話モードへ
            else {
                Reader reader = new BufferedReader(new FileReader(new File(args[0])));
                Quartz quartz = new Quartz(reader);
                quartz.eval();
            }
        } catch (ParseException e) {
            System.err.println(e);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void interactive() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.print("> ");
            String input = "";
            while (true) {
                String line = reader.readLine();
                if (line == null) return;
                input += line;
                if (line.length() == 0 || input.charAt(input.length() - 1) != '\u005c\u005c')
                    break;
                input = input.substring(0, input.length() - 1);
            }
            try {
                ReInit(new StringReader(input));
                eval();
            } catch (ParseException e) {
                System.err.println(e);
            }
        }
    }

  final public void eval() throws ParseException {
    Node root;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case DEF:
      case CLASS:
      case FUN:
      case PUTS:
      case INTEGER:
      case STRING:
      case IDENTIFIER:
      case 18:
      case 31:
      case 32:
      case 38:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      root = stmt();
                          root.eval(env);
    }
    jj_consume_token(0);
  }

  final public Node stmt() throws ParseException {
        Node v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      v = ifStmt();
      break;
    case WHILE:
      v = whileStmt();
      break;
    case FOR:
      v = forStmt();
      break;
    case DEF:
    case CLASS:
      v = defStmt();
      break;
    case FUN:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
    case 18:
    case 31:
    case 32:
    case 38:
      v = simpleStmt();
      break;
    case PUTS:
      v = putsStmt();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Node ifStmt() throws ParseException {
        Token t;
        Node a, b, c = null;
    t = jj_consume_token(IF);
    a = expr();
    jj_consume_token(THEN);
    b = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      c = block();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(END);
          {if (true) return new IfNode(t.beginLine, a, b, c);}
    throw new Error("Missing return statement in function");
  }

  final public Node whileStmt() throws ParseException {
        Token t;
        Node a, b;
    t = jj_consume_token(WHILE);
    a = expr();
    jj_consume_token(DO);
    b = block();
    jj_consume_token(END);
          {if (true) return new WhileNode(t.beginLine, a, b);}
    throw new Error("Missing return statement in function");
  }

  final public Node forStmt() throws ParseException {
        Token t;
        Node a, b;
    jj_consume_token(FOR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    a = expr();
    jj_consume_token(DO);
    b = block();
    jj_consume_token(END);
          {if (true) return new ForNode(t.beginLine, t.image, a, b);}
    throw new Error("Missing return statement in function");
  }

  final public Node defStmt() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      n = defFunStmt();
      break;
    case CLASS:
      n = defClassStmt();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node defClassStmt() throws ParseException {
        Token t;
        List<Node> as = new ArrayList<Node>();
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
    as = members();
    jj_consume_token(END);
          {if (true) return new DefClassNode(t.beginLine, t.image, as);}
    throw new Error("Missing return statement in function");
  }

  final public List<Node> members() throws ParseException {
        List<Node> nodes = new ArrayList<Node>();
        Node n;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case FUN:
      case INTEGER:
      case STRING:
      case IDENTIFIER:
      case 18:
      case 31:
      case 32:
      case 38:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      n = member();
                         nodes.add(n);
    }
          {if (true) return nodes;}
    throw new Error("Missing return statement in function");
  }

  final public Node member() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      n = defFunStmt();
      break;
    case FUN:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
    case 18:
    case 31:
    case 32:
    case 38:
      n = simpleStmt();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node defFunStmt() throws ParseException {
        Token t;
        List<String> ps;
        Node body;
    jj_consume_token(DEF);
    t = jj_consume_token(IDENTIFIER);
    ps = paramList();
    body = block();
    jj_consume_token(END);
          {if (true) return new DefNode(t.beginLine, t.image, ps, body);}
    throw new Error("Missing return statement in function");
  }

  final public List<String> paramList() throws ParseException {
        Token t;
        List<String> ps = new ArrayList<String>();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                 ps.add(t.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(19);
        t = jj_consume_token(IDENTIFIER);
                                                 ps.add(t.image);
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(20);
          {if (true) return ps;}
    throw new Error("Missing return statement in function");
  }

  final public Node putsStmt() throws ParseException {
        Token t;
        Node n;
    t = jj_consume_token(PUTS);
    n = simpleStmt();
          {if (true) return new PutsNode(t.beginLine, n);}
    throw new Error("Missing return statement in function");
  }

  final public Node block() throws ParseException {
        List<Node> nodes = new ArrayList<Node>();
        Node v;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case DEF:
      case CLASS:
      case FUN:
      case PUTS:
      case INTEGER:
      case STRING:
      case IDENTIFIER:
      case 18:
      case 31:
      case 32:
      case 38:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      v = stmt();
                       nodes.add(v);
    }
          {if (true) return new BlockNode(nodes);}
    throw new Error("Missing return statement in function");
  }

  final public Node simpleStmt() throws ParseException {
        Token t;
        Node v;
    v = expr();
    t = jj_consume_token(21);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Node expr() throws ParseException {
        Token t;
        NameNode n;
        Node v;
    if (jj_2_1(2)) {
      n = name();
      t = jj_consume_token(22);
      v = expr();
      {if (true) return new AssignNode(t.beginLine, n, v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUN:
      case INTEGER:
      case STRING:
      case IDENTIFIER:
      case 18:
      case 31:
      case 32:
      case 38:
        v = orExpr();
      {if (true) return v;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node orExpr() throws ParseException {
        Token t;
        Node x, y;
    x = andExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(23);
      y = andExpr();
                  x = new BinExprNode(t.beginLine, x, t.image, y);
    }
          {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Node andExpr() throws ParseException {
        Token t;
        Node x, y;
    x = compExpr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(24);
      y = compExpr();
                  x = new BinExprNode(t.beginLine, x, t.image, y);
    }
          {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Node compExpr() throws ParseException {
        Token t;
        Node x, y;
    x = numExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        t = jj_consume_token(25);
        break;
      case 26:
        t = jj_consume_token(26);
        break;
      case 27:
        t = jj_consume_token(27);
        break;
      case 28:
        t = jj_consume_token(28);
        break;
      case 29:
        t = jj_consume_token(29);
        break;
      case 30:
        t = jj_consume_token(30);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      y = numExpr();
          x = new BinExprNode(t.beginLine, x, t.image, y);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
          {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Node numExpr() throws ParseException {
        Token t;
        Node x, y;
    x = term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
      case 32:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        t = jj_consume_token(31);
        y = term();
        break;
      case 32:
        t = jj_consume_token(32);
        y = term();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  x = new BinExprNode(t.beginLine, x, t.image, y);
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Node term() throws ParseException {
        Token t;
        Node a, b;
    a = factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 34:
      case 35:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        t = jj_consume_token(33);
        b = factor();
        break;
      case 34:
        t = jj_consume_token(34);
        b = factor();
        break;
      case 35:
        t = jj_consume_token(35);
        b = factor();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  a = new BinExprNode(t.beginLine, a, t.image, b);
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Node factor() throws ParseException {
        Token t;
        Node i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
    case 38:
      i = element();
                                                  {if (true) return  i;}
      break;
    case 18:
      jj_consume_token(18);
      i = expr();
      jj_consume_token(20);
                                          {if (true) return  i;}
      break;
    case 32:
      t = jj_consume_token(32);
      i = factor();
                                          {if (true) return new NegExprNode(t.beginLine, i);}
      break;
    case 31:
      t = jj_consume_token(31);
      i = factor();
                                          {if (true) return new PosExprNode(t.beginLine, i);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node element() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      n = number();
      break;
    case STRING:
      n = string();
      break;
    case IDENTIFIER:
      n = name();
      break;
    case FUN:
      n = fun();
      break;
    case 38:
      n = array();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 38:
      case 40:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      n = postfix(n);
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node number() throws ParseException {
    Token t;
    t = jj_consume_token(INTEGER);
        {if (true) return new NumberNode(t.beginLine, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Node string() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
        {if (true) return new StringNode(t.beginLine, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public NameNode name() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return new NameNode(t.beginLine, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Node fun() throws ParseException {
        Token t;
        List<String> ps;
        Node body;
    t = jj_consume_token(FUN);
    ps = paramList();
    jj_consume_token(36);
    body = block();
    jj_consume_token(37);
          {if (true) return new FunNode(t.beginLine, ps, body);}
    throw new Error("Missing return statement in function");
  }

  final public Node array() throws ParseException {
        Token t;
        Node n;
        List<Node> as = new ArrayList<Node>();
    t = jj_consume_token(38);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
    case 18:
    case 31:
    case 32:
    case 38:
      n = expr();
                               as.add(n);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        jj_consume_token(19);
        n = expr();
                                                               as.add(n);
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(39);
          {if (true) return new DefArrayNode(t.beginLine, as);}
    throw new Error("Missing return statement in function");
  }

  final public Node postfix(Node n) throws ParseException {
        List<Node> as;
        Node z;
        Token right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      as = argList();
                         {if (true) return new CallNode(n.line(), n, as);}
      break;
    case 38:
      z = arrayRef();
                         {if (true) return new CallArrayNode(n.line(), n, z);}
      break;
    case 40:
      jj_consume_token(40);
      right = jj_consume_token(IDENTIFIER);
                                   {if (true) return new DotNode(n.line(), n, right.image);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Node> argList() throws ParseException {
        Node n;
        List<Node> as = new ArrayList<Node>();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
    case 18:
    case 31:
    case 32:
    case 38:
      n = expr();
                           as.add(n);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        jj_consume_token(19);
        n = expr();
                                                           as.add(n);
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(20);
          {if (true) return as;}
    throw new Error("Missing return statement in function");
  }

  final public Node arrayRef() throws ParseException {
        Node n;
    jj_consume_token(38);
    n = expr();
    jj_consume_token(39);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(22)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QuartzTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8007f8c8,0x8007f8c8,0x20,0x1800,0x8007a800,0x8007a800,0x80000,0x20000,0x8007f8c8,0x8007a000,0x800000,0x1000000,0x7e000000,0x7e000000,0x80000000,0x80000000,0x0,0x0,0x8007a000,0x3a000,0x40000,0x80000,0x8007a000,0x40000,0x80000,0x8007a000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x41,0x41,0x0,0x0,0x41,0x41,0x0,0x0,0x41,0x41,0x0,0x0,0x0,0x0,0x1,0x1,0xe,0xe,0x41,0x40,0x140,0x0,0x41,0x140,0x0,0x41,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Quartz(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Quartz(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QuartzTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Quartz(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QuartzTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Quartz(QuartzTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QuartzTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
